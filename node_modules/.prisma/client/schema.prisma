generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum definitions matching TypeScript enums
enum ListingStatus {
  DRAFT
  AVAILABLE
  PENDING_APPROVAL
  SOLD
  EXPIRED
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  COUNTERED
}

// User model (referenced by listings, offers, messages)
model User {
  id       String           @id @default(cuid())
  familyId String
  name     String
  listings Listing[]
  offers   Offer[]
  messages ListingMessage[]
}

// Family model to group marketplace activities
model Family {
  id       String    @id @default(cuid())
  name     String
  listings Listing[]
}

// Listing model with comprehensive marketplace details
model Listing {
  id          String        @id @default(cuid())
  title       String
  description String
  price       Decimal
  status      ListingStatus @default(DRAFT)

  // Relationships
  userId   String
  familyId String
  user     User   @relation(fields: [userId], references: [id])
  family   Family @relation(fields: [familyId], references: [id])

  // Optional image references
  images ListingImage[]

  // Related offers and messages
  offers   Offer[]
  messages ListingMessage[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indexes for performance
  @@index([userId])
  @@index([familyId])
  @@index([status])
  @@index([createdAt])
}

// Image model for listings (supports multiple images)
model ListingImage {
  id        String  @id @default(cuid())
  listingId String
  url       String
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([listingId])
}

// Offer model for marketplace interactions
model Offer {
  id        String      @id @default(cuid())
  listingId String
  userId    String
  price     Decimal
  status    OfferStatus @default(PENDING)
  message   String?

  // Relationships
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indexes for performance
  @@index([listingId])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

// Message model for listing communication
model ListingMessage {
  id        String @id @default(cuid())
  listingId String
  userId    String
  message   String

  // Relationships
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())

  // Indexes for performance
  @@index([listingId])
  @@index([userId])
  @@index([createdAt])
}
